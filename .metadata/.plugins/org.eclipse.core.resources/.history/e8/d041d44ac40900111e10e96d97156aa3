package com.bobboau.mandelbrot;

import java.util.concurrent.atomic.AtomicLong;

import android.os.Handler;
import android.os.Message;

/*
 * thread that draws one row of a mandelbrot set at a time
 * designed to allow more than one thread to work on different rows at the same*/

public class DrawerThread extends Thread {
	final Handler handler;
	
	//book mark to which row was last worked on
	private static AtomicLong global_row = new AtomicLong(0);

	int width; //width of the bitmap
	int height; //height of the bitmap
	
	DrawerThread(Handler handler, int w, int h) {
		this.handler = handler;
		width = w;
		height = h;
	}
	
	static public void resetDrawers(){
		global_row = new AtomicLong(0);
	}
	
	public void run() {
		float bmp_row[] = new float[width];
		final Message message = handler.obtainMessage();
		
		long row = global_row.getAndIncrement();
		while(row < height){
			for(int i = 0; i<width; i++){
				bmp_row[i] = (float)i/(float)width;
			}
			message.arg1 = (int)row;
			message.obj = bmp_row;
			handler.sendMessage(message);
			row = global_row.getAndIncrement();
		}
	}

}
