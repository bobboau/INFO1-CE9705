package com.bobboau.mandelbrot;

import java.util.concurrent.atomic.AtomicLong;

import android.os.Handler;
import android.os.Message;

/*
 * thread that draws one row of a mandelbrot set at a time
 * designed to allow more than one thread to work on different rows at the same*/

public class DrawerThread extends Thread {
	final Handler handler;
	
	//book mark to which row was last worked on
	private static AtomicLong global_row = new AtomicLong(0);

	private static int width; //width of the bitmap
	private static int height; //height of the bitmap
	
	//do we want to keep running or are we no longer needed
	private boolean run = true;
	
	/*
	 * constructor
	 */
	DrawerThread(Handler handler) {
		this.handler = handler;
	}
	
	/*
	 * resets the drawing pool
	 */
	static public void resetDrawers(int w, int h){
		global_row = new AtomicLong(0);
		width = w;
		height = h;
	}
	
	/*
	 * we don't want you anymore
	 */
	public void kill(){
		run = false;
	}
	
	/*
	 * the processing thread
	 */
	public void run() {
		float bmp_row[] = new float[width];
		
		long row = global_row.getAndIncrement();
		while(row < height && run){
			for(int i = 0; i<width && run; i++){
				bmp_row[i] = process((float)i/(float)width, (float)row/(float)height);
			}
			
			if(run){
				final Message message = handler.obtainMessage();
				message.arg1 = (int)row;
				message.obj = bmp_row;
				handler.sendMessage(message);
				row = global_row.getAndIncrement();
			}
		}
		
		run = true;//so when we start up again we don't just kill ourselves
	}
	
	private float process(float x, float y){
		int i = 0;
	    int max = getResources().getInteger(R.integer.thread_count);
	}

}
